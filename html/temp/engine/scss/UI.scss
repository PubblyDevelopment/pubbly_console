.UI {
  position: absolute;
}

.UI.RelativeEdges {
  position: absolute;
  overflow: hidden;
  height: 100%;
  width: 100%;
  transition:0s;

  &.half {
    width:50%;
    margin-left:25%;
  }


  .positioner {
    z-index: 11;
    position: absolute;
    .offscreener {
      position: relative;
      display: inline-block;
      cursor: pointer;
    }
  }
  /* 
    Need the UI elements to be in front of the runtime (to catch events)
    But when UI removed, img is offscreen but positioner is not (and can't be by design)
    So a hidden UI has no pointer events on the positioner
    */
  &.hide .positioner {
    pointer-events: none;
    .offscreener {
      cursor: default;
    }
  }
  &.disabled .offscreener {
    opacity: 0.5;
    cursor: default;
  }
  
  // Quick fix for SVGs we will add later, but don't want to show right now. (doesn't toggle with show/hide, but saves placement)
  &.hidden img {
    visibility: hidden;
  }
  /*
    Explanation...
  
    First option, lets margin-top:-100% and margin-left:-100%; That'll work
    Works fine if dimensions are 1-1. But if height is different from width, the top margin will be 100% of the width, and the "offscreen" will be bad
  
    Ok lets use translateY(-100%) and translateX(-100%). That'll work
    Nope. Translate is a provery value, not the declaration. And you can't have
    transform: translateY(-100%);
    transform: translateX(-100%);
    because they'll cancel eachother. And you WANT the properties declared in seperate classes, so that top left and bottom left can share the "left" part.
  
    Grand solution? Hacky shit! CSS woo!
    use margin-left:-100% for the horizontal
    use transform: translateY(-100%) for the vertical
    */

  $angles: 4;
  $degs: 360 / $angles;
  @for $i from 0 through $angles {
    $deg: $degs * $i;
    // <div class="UI flip-180"> ... svg upsidedown
    &.flip-#{$deg} img {
      transform: rotate(#{$deg}deg);
    }
  }
  &[vert="top"] {
    .positioner {
      top: 0;
    }
    &.hide .positioner .offscreener {
      transform: translateY(-100%);
    }
  }
  &[vert="middle"] {
    .positioner {
      top: 50%;
      .offscreener {
        transform: translateY(-50%);
      }
    }
  }
  &[vert="bottom"] {
    .positioner {
      bottom: 0;
    }
    &.hide .positioner .offscreener {
      transform: translateY(100%);
    }
  }
  &[hori="left"] {
    .positioner {
      left: 0;
    }
    &.hide .positioner .offscreener {
      margin-left: -100%;
    }
  }
  &[hori="middle"] {
    .positioner {
      left: 50%;
      .offscreener {
        margin-left: -50%;
      }
    }
  }
  &[hori="right"] {
    .positioner {
      right: 0;
    }
    &.hide .positioner .offscreener {
      margin-left: 100%;
    }
  }
}
